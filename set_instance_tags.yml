---
- hosts: "{{ HOSTS | default('control[0]') }}"
  connection: local
  #vars:
    #organization: "Default Organization"
    #validate_certs: false
  tasks:
  - name: "Get instance details"
    import_role:
      name: ec2_node_tools
      tasks_from: get_instance_details

  - set_fact:
      host_ec2_instance_id: {}

  - name: "Set facts based on individual host's ec2 instance_id"
    set_fact:
      host_ec2_instance_id: >
        {{
          host_ec2_instance_id |
          combine(
            { item : instances_details | json_query(ansible_instance_id_query) }
                 )
        }}
    vars:
      ansible_instance_id_query: "instances[?contains(['{{ item.split('.')[0] | lower }}'], tags.short_name)].instance_id | [0]"
    with_items: "{{ group_tag_map | list }}"
    when: instances_details is not none

  - debug:
      msg:
        - "Instance ID ==> {{ host_ec2_instance_id[item] }}"
        - "Node ==> {{ item }}"
    #vars:
    #  ansible_host_name_query: "resources[?starts_with(name, 'node')].name"
    with_items: "{{ group_tag_map | list }}"
    when: instances_details is not none

  #- name: "Populate EC2 instance tags"
  #  vars:
  #    ansible_host_name_query: "resources[?starts_with(name, 'node')].name"
  #  ec2_tag:
  #    region: "{{ ec2_region }}"
  #    resource: "{{ host_ec2_instance_id[item] }}"
  #    state: present
  #    tags:
  #      Environment: "{{ host_satellite_lifecycle_env[item].split('_')[1] }}"
  #  with_items: "{{ resource_info_hosts_result | to_json | from_json | json_query(ansible_host_name_query) | list }}"
  #  when: instances_details is not none
